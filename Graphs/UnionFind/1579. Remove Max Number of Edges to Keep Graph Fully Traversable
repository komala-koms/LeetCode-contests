class UnionFind
{
    int root[];
    int rank[];
    int components;
    public UnionFind(int n)
    {
        this.root = new int[n+1];
        this.rank = new int[n+1];
        this.components = n;
        for(int i=0;i<=n;i++)
        {
            this.root[i] = i;
            this.rank[i] = 0;
            
        }
    }

    public boolean sameComponent()
    {
        if(components == 1)
            return true;
        return false;
    }
    public void union(int x, int y)
    {
        int rootx = find(x);
        int rooty = find(y);
        if(rootx != rooty)
        {
            if(rank[rootx] == rank[rooty])
            {
                root[rooty] = rootx;
                rank[rootx] += 1;
            }
            else if(rank[rooty] > rank[rootx])
            {
                root[rootx] = rooty;
            }
            else
            {
                root[rooty] = rootx;
            }
            components-=1;
        }
    }

    public int find(int x)
    {
        if(x == root[x])
            return x;
        return root[x] = find(root[x]);
    }

    public boolean isConnected(int x, int y)
    {
        if(find(x) != find(y))
            return false;
        return true;
    }
}
class Solution 
{
    public int maxNumEdgesToRemove(int n, int[][] edges) 
    {
        UnionFind alice = new UnionFind(n);
        UnionFind bob   = new UnionFind(n);
        int edgesRequired = 0;
        for(int i=0;i<edges.length;i++)
        {
            if(edges[i][0] == 3)
            {
                if(!alice.isConnected(edges[i][1],edges[i][2]) || !bob.isConnected(edges[i][1],edges[i][2]) )
                {
                    if(!alice.isConnected(edges[i][1],edges[i][2]))
                    {
                        alice.union(edges[i][1],edges[i][2]);
                    }
                    if(!bob.isConnected(edges[i][1],edges[i][2]))
                    {
                        bob.union(edges[i][1],edges[i][2]);
                    }
                    edgesRequired += 1;
                }
            }
        }
        for(int i=0;i<edges.length;i++)
        {
            if(edges[i][0] == 1)
            {
                if(!alice.isConnected(edges[i][1],edges[i][2]))
                {
                    alice.union(edges[i][1],edges[i][2]);
                    edgesRequired += 1;
                } 
            }
            if(edges[i][0] == 2)
            {
                if(!bob.isConnected(edges[i][1],edges[i][2]))
                {
                    bob.union(edges[i][1],edges[i][2]);
                    edgesRequired += 1;
                }
            }
        }
        if(alice.sameComponent() && bob.sameComponent())
         return edges.length - edgesRequired;
        return -1;
    }
}
