class UnionFind
{
    int[] root;
    int[] rank;
    public UnionFind(int n)
    {
        this.root = new int[n];
        this.rank = new int[n];
        for(int i=0;i<n;i++)
        {
            this.root[i] = i;
            this.rank[i] = 0;
        }
    }
    public int find(int x)
    {
        if(x == root[x])
            return x;
        return root[x] = find(root[x]);
    }
    public void union(int x, int y)
    {
        int rootx = find(x);
        int rooty = find(y);
        if(rank[rootx] == rank[rooty])
        {
            root[rooty] = rootx;
            rank[rootx] += 1;
        }
        else if(rank[rootx] > rank[rooty])
        {
            root[rooty] = rootx;
        }
        else
        {
            root[rootx] = rooty;
        }
    }

    public boolean isConnected(int x, int y)
    {
        int rootx = find(x);
        int rooty = find(y);
        if(rootx == rooty)
            return true;
        return false;
        
    }
}
class Solution 
{
    public boolean[] distanceLimitedPathsExist(int n1, int[][] edgeList, int[][] queries) 
    {
        int n = edgeList.length;
        int m = queries.length;
        
        UnionFind uf = new UnionFind(n1);
        // inserting the index of queries useful while filling answer array
        for(int i=0;i<m;i++)
        {
            queries[i] = new int[]{queries[i][0],queries[i][1],queries[i][2],i};
        }
        Arrays.sort(queries,(a,b)->(a[2] - b[2]));
        Arrays.sort(edgeList,(a,b) -> (a[2] - b[2]));
        boolean[] ans = new boolean[m];
        int j=0;
        for(int i=0;i<m;i++)
        {
            int limit = queries[i][2];
            int p = queries[i][0];
            int q = queries[i][1];
            while(j<n && edgeList[j][2] < limit)
            {
                int wt = edgeList[j][2];
                int u =  edgeList[j][0];
                int v =  edgeList[j][1];
                
                uf.union(u,v);
                j+=1;
            }
            if(uf.isConnected(p,q))
            {
                ans[queries[i][3]] = true;
            }
            else
                ans[queries[i][3]] = false;
           
        }
        return ans;
    }

}
