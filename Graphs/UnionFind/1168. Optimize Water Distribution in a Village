class Pair
{
    int edge1;
    int edge2;
    int weight;
    public Pair(int edge1, int edge2, int weight)
    {
        this.edge1 = edge1;
        this.edge2 = edge2;
        this.weight = weight;
    }
}

class UnionFind
{
    int[] root;
    int[] rank;
    
    public UnionFind(int n)
    {
        this.root = new int[n];
        this.rank = new int[n];
        for(int i=0;i<n;i++)
        {
            root[i] = i;
            rank[i] = 0;
        }
    }
    
    public int find(int x)
    {
        if(x == root[x])
            return x;
        return root[x] = find(root[x]);
    }
    
    public void union(int x, int y)
    {
        int rootx = find(x);
        int rooty = find(y);
        if(rootx != rooty)
        {
            if(rank[rootx] > rank[rooty])
                root[rooty] = rootx;
            else if(rank[rooty] > rank[rootx])
                root[rootx] = rooty;
            else
            {
                root[rooty] = rootx;
                rank[rootx] += 1;
            }
        }
    }
    
    public boolean connected(int x, int y)
    {
        int rootx = find(x);
        int rooty = find(y);
        if(rootx == rooty)
            return true;
        return false;
    }
}

class Solution {
    public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) 
    {
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->(a.weight - b.weight));
        for(int i=0;i<wells.length;i++)
        {
            Pair p = new Pair(0,i+1,wells[i]);
            pq.add(p);
        }
        for(int[] i: pipes)
        {
            Pair p = new Pair(i[0],i[1],i[2]);
            pq.add(p);
        }
        UnionFind uf = new UnionFind(n+1);
        int res = 0;
        while(!pq.isEmpty())
        {
            Pair temp = pq.poll();
            if(!(uf.connected(temp.edge1,temp.edge2)))
            {
                uf.union(temp.edge1,temp.edge2);
                res += temp.weight;
            }
        }
        return res;
            
    }
}
